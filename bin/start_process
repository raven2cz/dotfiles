#!/bin/bash

# Author: raven2cz
# Version: 1.2
# License: MIT
#
# This script starts a specified process if it's not already running and retries up to 3 times with a delay if the process fails to start.
# It can optionally accept a process name to check if that process is running and a flag to disable retries.
# If no process name is provided, the script uses the command as the process name.
#
# Usage:
#   ./script_name [-n|--name process_name] [-r|--no-retry] [-h|--help] command
# Options:
#   -n, --name     Specify the name of the process to check if it's running.
#   -r, --no-retry Disable retry attempts.
#   -h, --help     Show this help message and exit.

process_name=""
retry_enabled=1
retry_count=3
retry_delay=5 # delay in seconds

show_help() {
    awk 'NR==1 {next} /^#/{print substr($0, 3)} /^[^#]/ {exit}' "$0"
    exit 0
}

# Parse optional arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    -n|--name)
      process_name="$2"
      shift 2
      ;;
    -r|--no-retry)
      retry_enabled=0
      shift
      ;;
    -h|--help)
      show_help
      ;;
    *)
      break
      ;;
  esac
done

# Command is the rest of the arguments
command="$*"

# Function to start a process with optional retries
start_process() {
    if [ -z "$process_name" ]; then
        echo "Process name not provided. Using command as process name."
        process_name="$command"
    fi

    local attempt=0
    local max_attempts=$((retry_enabled ? retry_count : 1))
    while [ $attempt -lt $max_attempts ]; do
        if pgrep -f "$process_name" | grep -v $$ | grep -v $PPID | grep -v grep > /dev/null; then
            echo "Process is already running."
            return 0
        else
            echo "Attempting to start process: $command (Attempt $((attempt+1))/$max_attempts)"
            nohup bash -c "$command" &>/dev/null &
            sleep 1 # Give a moment to start and check again
            if pgrep -f "$process_name" | grep -v $$ | grep -v $PPID | grep -v grep > /dev/null; then
                echo "Process started successfully."
                return 0
            fi
            if [ $retry_enabled -eq 1 ]; then
                sleep $retry_delay
            fi
        fi
        ((attempt++))
    done

    if [ $retry_enabled -eq 1 ]; then
        echo "Failed to start process after $max_attempts attempts."
    else
        echo "Failed to start process."
    fi
}

# Check if command is provided
if [ -z "$command" ]; then
    show_help
else
    start_process
fi

